plugins {
    id 'java'
}

version '1.0'

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

project.ext.lwjglVersion = "3.2.3"
project.ext.jomlVersion = "1.9.23"
project.ext.lwjglNatives = "natives-windows"
project.ext.imguiVersion = '1.81.0'

dependencies {
    // Annotations
    compileOnly 'org.jetbrains:annotations:26.0.2'

    // Custom libs like freetype
    implementation fileTree('libs') {include '*.jar' }

    // Json handling by jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'

    // ImGUI stuff
    implementation "io.github.spair:imgui-java-app:$imguiVersion"

    // LWJGL stuff
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
}



jar {
    manifest {
        attributes (
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'Main'
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyAssets(type: Copy) {
    copy {
        from "assets"
        into "${buildDir}/libs/assets"
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

fatJar.dependsOn(copyAssets)

artifacts {
    archives fatJar
}